#!/usr/bin/env python3
"""
Script de test pour v√©rifier que le service FTPLogService fonctionne correctement.

Ce script teste toutes les fonctionnalit√©s principales:
- Connexion √† la base de donn√©es
- Connexion au serveur FTP
- Exploration des dossiers
- Traitement d'un fichier
- Processus complet

Utilisation: python test_service.py
"""

import os
import sys
import logging
from datetime import datetime

# Ajouter le r√©pertoire courant au path pour pouvoir importer notre service
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ftp_log_service import FTPLogService

# Configuration du syst√®me de logs pour voir ce qui se passe pendant les tests
logging.basicConfig(
    level=logging.DEBUG, 
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def test_database_connection():
    """
    Test pour v√©rifier que la connexion √† la base de donn√©es fonctionne.
    
    Returns:
        bool: True si le test r√©ussit, False sinon
    """
    logger.info("üîç Test de connexion √† la base de donn√©es...")
    
    # Cr√©er une instance du service
    service = FTPLogService()
    
    try:
        # Essayer de se connecter √† la base de donn√©es
        success = service.connect_db()
        
        if success:
            logger.info("‚úÖ Connexion √† la base de donn√©es r√©ussie")
            # Fermer proprement les connexions
            service.close_connections()
            return True
        else:
            logger.error("‚ùå √âchec de la connexion √† la base de donn√©es")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue lors de la connexion √† la base de donn√©es: {e}")
        return False


def test_ftp_connection():
    """
    Test pour v√©rifier que la connexion au serveur FTP fonctionne
    et qu'on peut r√©cup√©rer les dossiers et fichiers.
    
    Returns:
        bool: True si le test r√©ussit, False sinon
    """
    logger.info("üîç Test de connexion au serveur FTP...")
    
    # Cr√©er une instance du service
    service = FTPLogService()
    
    try:
        # Essayer de se connecter au FTP
        success = service.connect_ftp()
        if not success:
            logger.error("‚ùå √âchec de la connexion FTP")
            return False
        
        # Tester la r√©cup√©ration des dossiers de centres d'usinage
        directories = service.get_cu_directories_from_ftp(service.ftp)
        logger.info(f"‚úÖ Connexion FTP r√©ussie, {len(directories)} dossiers CU trouv√©s: {directories}")
        
        # Tester la r√©cup√©ration des fichiers LOG dans chaque dossier
        total_files = 0
        for directory in directories:
            files = service.get_log_files_from_directory(service.ftp, directory)
            total_files += len(files)
            logger.info(f"  üìÅ {directory}: {len(files)} fichiers LOG")
        
        logger.info(f"üìä Total: {total_files} fichiers LOG trouv√©s dans tous les dossiers")
        
        # Fermer la connexion FTP
        service.ftp.quit()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test de connexion FTP: {e}")
        return False


def test_directory_exploration():
    """
    Test sp√©cifique pour explorer en d√©tail les dossiers du FTP
    et v√©rifier qu'on peut acc√©der aux fichiers.
    
    Returns:
        bool: True si le test r√©ussit, False sinon
    """
    logger.info("üîç Test de l'exploration d√©taill√©e des dossiers...")
    
    # Cr√©er une instance du service
    service = FTPLogService()
    
    try:
        # Se connecter au FTP
        success = service.connect_ftp()
        if not success:
            logger.error("‚ùå √âchec de la connexion FTP")
            return False
        
        # Lister tous les √©l√©ments √† la racine du FTP
        all_items = service.ftp.nlst()
        logger.info(f"üìÇ √âl√©ments √† la racine FTP: {all_items}")
        
        # V√©rifier chaque dossier de centre d'usinage configur√©
        for directory_name, cu_type in service.cu_directories.items():
            if directory_name in all_items:
                logger.info(f"‚úÖ Dossier {directory_name} ({cu_type}) trouv√©")
                
                # Tester l'acc√®s au dossier et compter les fichiers
                try:
                    files = service.get_log_files_from_directory(service.ftp, directory_name)
                    logger.info(f"  üìÑ {len(files)} fichiers LOG dans {directory_name}")
                    
                    # Afficher quelques exemples de fichiers
                    if files:
                        examples = files[:3]  # Prendre les 3 premiers
                        logger.info(f"  üìã Exemples: {examples}...")
                        
                except Exception as e:
                    logger.error(f"  ‚ùå Erreur acc√®s √† {directory_name}: {e}")
            else:
                logger.warning(f"‚ùå Dossier {directory_name} ({cu_type}) non trouv√©")
        
        # Fermer la connexion FTP
        service.ftp.quit()
        return True
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors de l'exploration des dossiers: {e}")
        return False


def test_single_file_processing():
    """
    Test pour traiter un seul fichier LOG du d√©but √† la fin
    (sans le supprimer du FTP pour ne pas perturber les autres tests).
    
    Returns:
        bool: True si le test r√©ussit, False sinon
    """
    logger.info("üîç Test du traitement d'un fichier LOG complet...")
    
    # Cr√©er une instance du service
    service = FTPLogService()
    
    try:
        # Se connecter √† la base de donn√©es et au FTP
        if not service.connect_db():
            logger.error("‚ùå √âchec de la connexion √† la base de donn√©es")
            return False
            
        success = service.connect_ftp()
        if not success:
            logger.error("‚ùå √âchec de la connexion FTP")
            return False
        
        # Chercher un fichier √† traiter dans les dossiers disponibles
        directories = service.get_cu_directories_from_ftp(service.ftp)
        
        for directory in directories:
            files = service.get_log_files_from_directory(service.ftp, directory)
            
            if files:
                # Prendre le premier fichier trouv√©
                filename = files[0]
                cu_type = service.cu_directories[directory]
                
                logger.info(f"üìÑ Test avec {directory}/{filename} (Type: {cu_type})")
                
                # === √âTAPE 1: T√âL√âCHARGER LE FICHIER ===
                log_content = service.download_log_file_from_directory(service.ftp, directory, filename)
                if not log_content:
                    logger.error("‚ùå √âchec du t√©l√©chargement")
                    continue
                
                logger.info(f"‚úÖ Fichier t√©l√©charg√©: {len(log_content)} caract√®res")
                
                # === √âTAPE 2: ANALYSER LE CONTENU ===
                data = service.parse_log_content(log_content, filename)
                if not data:
                    logger.error("‚ùå √âchec de l'analyse du contenu")
                    continue
                
                logger.info(f"‚úÖ Contenu analys√©: {len(data)} √©v√©nements trouv√©s")
                
                # === √âTAPE 3: CALCULER LES PERFORMANCES ===
                results = service.analyze_machine_performance(data, filename, cu_type)
                if not results:
                    logger.error("‚ùå √âchec du calcul des performances")
                    continue
                
                logger.info(f"‚úÖ Performances calcul√©es: {results['TotalPieces']} pi√®ces, {results['TauxOccupation']:.1f}% occupation")
                
                # === √âTAPE 4: TEST DE SAUVEGARDE (SANS COMMIT) ===
                try:
                    # Sauvegarder en base de donn√©es
                    service.save_to_database(results, cu_type, filename, directory)
                    
                    # Annuler la transaction pour ne pas polluer la base de donn√©es
                    service.conn.rollback()
                    logger.info("‚úÖ Test de sauvegarde r√©ussi (transaction annul√©e)")
                    
                except Exception as e:
                    logger.error(f"‚ùå Erreur lors du test de sauvegarde: {e}")
                    service.conn.rollback()
                
                # Fermer les connexions
                service.ftp.quit()
                service.close_connections()
                return True
        
        # Si on arrive ici, aucun fichier n'a √©t√© trouv√©
        logger.warning("‚ö†Ô∏è Aucun fichier LOG trouv√© pour le test")
        service.ftp.quit()
        service.close_connections()
        return False
        
    except Exception as e:
        logger.error(f"‚ùå Erreur lors du test de traitement de fichier: {e}")
        return False


def test_full_process():
    """
    Test du processus complet de traitement de tous les logs
    (sans supprimer les fichiers du FTP pour ne pas les perdre).
    
    Returns:
        bool: True si le test r√©ussit, False sinon
    """
    logger.info("üîç Test du processus complet de traitement...")
    
    # Cr√©er une instance du service
    service = FTPLogService()
    
    try:
        # Lancer le processus complet SANS supprimer les fichiers
        # (delete_after_processing=False pour les tests)
        success = service.process_all_logs(delete_after_processing=False)
        
        if success:
            logger.info("‚úÖ Processus complet r√©ussi")
            return True
        else:
            logger.error("‚ùå Le processus complet a rencontr√© des erreurs")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Erreur inattendue dans le processus complet: {e}")
        # Afficher plus de d√©tails sur l'erreur
        import traceback
        logger.error("D√©tails de l'erreur:")
        logger.error(traceback.format_exc())
        return False


def main():
    """
    Fonction principale qui ex√©cute tous les tests dans l'ordre
    et affiche un r√©sum√© des r√©sultats.
    """
    logger.info("=" * 80)
    logger.info("üöÄ D√âBUT DES TESTS DU SERVICE FTP LOG")
    logger.info("=" * 80)
    
    # Liste de tous les tests √† ex√©cuter
    # Chaque test est un tuple (nom_du_test, fonction_de_test)
    tests = [
        ("Connexion Base de Donn√©es", test_database_connection),
        ("Connexion FTP", test_ftp_connection),
        ("Exploration Dossiers", test_directory_exploration),
        ("Traitement Fichier Unique", test_single_file_processing),
        ("Processus Complet", test_full_process)
    ]
    
    # Liste pour stocker les r√©sultats de chaque test
    results = []
    
    # Ex√©cuter chaque test
    for test_name, test_func in tests:
        logger.info(f"\n--- üß™ Test: {test_name} ---")
        
        try:
            # Ex√©cuter le test et stocker le r√©sultat
            result = test_func()
            results.append((test_name, result))
            
            # Afficher le r√©sultat imm√©diatement
            if result:
                logger.info(f"‚úÖ {test_name}: R√âUSSI")
            else:
                logger.error(f"‚ùå {test_name}: √âCHEC")
                
        except Exception as e:
            logger.error(f"üí• Erreur inattendue dans {test_name}: {e}")
            results.append((test_name, False))
    
    # === AFFICHAGE DU R√âSUM√â FINAL ===
    logger.info("\n" + "=" * 80)
    logger.info("üìä R√âSUM√â DES TESTS")
    logger.info("=" * 80)
    
    # Compter les succ√®s et √©checs
    all_passed = True
    passed_count = 0
    failed_count = 0
    
    for test_name, result in results:
        if result:
            status = "‚úÖ R√âUSSI"
            passed_count += 1
        else:
            status = "‚ùå √âCHEC"
            failed_count += 1
            all_passed = False
        
        logger.info(f"{test_name:.<40} {status}")
    
    # Affichage du r√©sultat global
    logger.info("=" * 80)
    logger.info(f"üìà Tests r√©ussis: {passed_count}")
    logger.info(f"‚ùå Tests √©chou√©s: {failed_count}")
    
    if all_passed:
        logger.info("üéâ TOUS LES TESTS ONT R√âUSSI!")
        return 0  # Code de sortie 0 = succ√®s
    else:
        logger.error("üí• CERTAINS TESTS ONT √âCHOU√â!")
        return 1  # Code de sortie 1 = √©chec


# Point d'entr√©e du script
if __name__ == "__main__":
    # Ex√©cuter les tests et utiliser le code de sortie pour indiquer le r√©sultat
    exit_code = main()
    sys.exit(exit_code) 