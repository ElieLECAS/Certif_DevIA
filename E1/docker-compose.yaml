version: "3.9"

services:
    sftp:
        image: atmoz/sftp
        container_name: e1-sftp-server
        volumes:
            - ./logs:/home/sftp_user/logs
            - sftp_ssh_keys:/etc/ssh
            - sftp_user_keys:/home/sftp_user/.ssh
        ports:
            - "${SFTP_PORT}:22"
        environment:
            - SFTP_USERS=${SFTP_USER}:1000
        restart: unless-stopped
        command: >
            sh -c "
            mkdir -p /home/sftp_user/logs/DEM12 &&
            mkdir -p /home/sftp_user/logs/DEMALU &&
            mkdir -p /home/sftp_user/logs/SU12 &&
            mkdir -p /home/sftp_user/.ssh &&
            chown -R sftp_user /home/sftp_user/logs &&
            chown -R sftp_user /home/sftp_user/.ssh &&
            chmod 700 /home/sftp_user/.ssh &&
            touch /home/sftp_user/.ssh/authorized_keys &&
            chown sftp_user /home/sftp_user/.ssh/authorized_keys &&
            chmod 600 /home/sftp_user/.ssh/authorized_keys &&
            if [ ! -f /etc/ssh/ssh_host_ed25519_key ]; then
                ssh-keygen -A
            fi &&
            /entrypoint
            "
        deploy:
            resources:
                limits:
                    cpus: "0.5"
                    memory: 512M
                reservations:
                    cpus: "0.1"
                    memory: 256M

    db:
        image: postgres:15
        container_name: postgres_db
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        volumes:
            - pgdata:/var/lib/postgresql/data
        ports:
            - "${POSTGRES_PORT}:5432"
        restart: unless-stopped
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
                ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s

    mysql_db:
        image: mysql:8.0
        container_name: mysql_fenetre
        environment:
            MYSQL_DATABASE: db_commandes
            MYSQL_USER: fenetre_user
            MYSQL_PASSWORD: password
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        volumes:
            - mysql_data:/var/lib/mysql
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql
        ports:
            - "3306:3306"
        restart: unless-stopped
        healthcheck:
            test:
                [
                    "CMD",
                    "mysqladmin",
                    "ping",
                    "-h",
                    "localhost",
                    "-u",
                    "fenetre_user",
                    "-ppassword",
                ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 30s

    sync_service:
        build: ./script
        container_name: sync_service
        depends_on:
            mysql_db:
                condition: service_healthy
            db:
                condition: service_healthy
        environment:
            # Configuration PostgreSQL
            - POSTGRES_HOST=db
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            # Configuration MySQL
            - MYSQL_HOST=mysql_db
            - MYSQL_DB=db_commandes
            - MYSQL_USER=fenetre_user
            - MYSQL_PASSWORD=password
            # Configuration SFTP
            - FTP_HOST=sftp-server
            # Configuration de la synchronisation
            - DELETE_AFTER_SYNC=${DELETE_AFTER_SYNC:-false} # Supprimer les fichiers apr√®s traitement
        volumes:
            - ./logs:/app/logs
            - ./script/sync_logs:/app/sync_logs
        restart: unless-stopped

    api:
        build: ./api
        container_name: fastapi_server
        depends_on:
            db:
                condition: service_healthy
        environment:
            - POSTGRES_HOST=${POSTGRES_HOST}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - SECRET_KEY=${SECRET_KEY:-09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7}
        ports:
            - "8000:8000"
        volumes:
            - ./api:/app
        restart: unless-stopped

volumes:
    pgdata:
    mysql_data:
    sftp_ssh_keys:
    sftp_user_keys:
