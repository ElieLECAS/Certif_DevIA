#!/usr/bin/env python3
"""
Script pour ex√©cuter tous les tests du projet FastAPI avec options avanc√©es.
"""

import subprocess
import sys
import os
import argparse
import time
from pathlib import Path


def run_command(command, description):
    """Ex√©cute une commande et affiche le r√©sultat."""
    print(f"\n{'='*60}")
    print(f"üöÄ {description}")
    print(f"{'='*60}")
    print(f"Commande: {command}")
    print(f"{'='*60}")
    
    start_time = time.time()
    try:
        result = subprocess.run(
            command,
            shell=True,
            capture_output=True,
            text=True,
            cwd=Path(__file__).parent
        )
        end_time = time.time()
        
        print(f"Dur√©e: {end_time - start_time:.2f} secondes")
        print(f"Code de retour: {result.returncode}")
        
        if result.stdout:
            print("\nüì§ Sortie standard:")
            print(result.stdout)
        
        if result.stderr:
            print("\n‚ö†Ô∏è  Erreurs:")
            print(result.stderr)
        
        return result.returncode == 0
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'ex√©cution: {e}")
        return False


def run_tests_with_options(options):
    """Ex√©cute les tests avec les options sp√©cifi√©es."""
    base_command = "python -m pytest"
    
    # Options de base
    command_parts = [base_command]
    
    # Options de verbosit√©
    if options.verbose:
        command_parts.append("-v")
    if options.very_verbose:
        command_parts.append("-vv")
    if options.quiet:
        command_parts.append("-q")
    
    # Options de couverture
    if options.coverage:
        command_parts.append("--cov=.")
        command_parts.append("--cov-report=html")
        command_parts.append("--cov-report=term-missing")
    
    # Options de performance
    if options.slow:
        command_parts.append("-m slow")
    if options.fast:
        command_parts.append("-m not slow")
    
    # Options de filtrage
    if options.test_pattern:
        command_parts.append(f"-k {options.test_pattern}")
    
    # Options de parall√©lisation
    if options.parallel:
        command_parts.append("-n auto")
    
    # Options de rapport
    if options.html_report:
        command_parts.append("--html=test_report.html")
        command_parts.append("--self-contained-html")
    
    if options.junit_report:
        command_parts.append("--junitxml=test_results.xml")
    
    # Ajouter le r√©pertoire des tests
    command_parts.append("tests/")
    
    command = " ".join(command_parts)
    
    return run_command(command, "Ex√©cution des tests pytest")


def run_linting():
    """Ex√©cute les v√©rifications de code."""
    print("\nüîç V√©rifications de code...")
    
    # Flake8 pour la qualit√© du code
    flake8_success = run_command(
        "flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics",
        "V√©rification Flake8 (erreurs critiques)"
    )
    
    # MyPy pour le typage
    mypy_success = run_command(
        "mypy . --ignore-missing-imports",
        "V√©rification MyPy (typage)"
    )
    
    return flake8_success and mypy_success


def run_security_checks():
    """Ex√©cute les v√©rifications de s√©curit√©."""
    print("\nüîí V√©rifications de s√©curit√©...")
    
    # Bandit pour la s√©curit√©
    bandit_success = run_command(
        "bandit -r . -f json -o bandit_report.json",
        "Analyse de s√©curit√© avec Bandit"
    )
    
    # Safety pour les d√©pendances
    safety_success = run_command(
        "safety check",
        "V√©rification des vuln√©rabilit√©s des d√©pendances"
    )
    
    return bandit_success and safety_success


def run_performance_tests():
    """Ex√©cute les tests de performance."""
    print("\n‚ö° Tests de performance...")
    
    # Tests de charge avec locust (si disponible)
    locust_success = run_command(
        "locust --headless --users 10 --spawn-rate 2 --run-time 30s --host http://localhost:8000",
        "Test de charge avec Locust"
    )
    
    return locust_success


def generate_test_report():
    """G√©n√®re un rapport de tests."""
    print("\nüìä G√©n√©ration du rapport de tests...")
    
    # Cr√©er un rapport HTML simple
    report_content = """
    <!DOCTYPE html>
    <html>
    <head>
        <title>Rapport de Tests FastAPI</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 20px; }
            .header { background-color: #f0f0f0; padding: 20px; border-radius: 5px; }
            .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
            .success { background-color: #d4edda; border-color: #c3e6cb; }
            .error { background-color: #f8d7da; border-color: #f5c6cb; }
            .warning { background-color: #fff3cd; border-color: #ffeaa7; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üöÄ Rapport de Tests FastAPI</h1>
            <p>G√©n√©r√© le: {timestamp}</p>
        </div>
        
        <div class="section success">
            <h2>‚úÖ Tests Ex√©cut√©s</h2>
            <ul>
                <li>Tests unitaires avec pytest</li>
                <li>Tests d'int√©gration</li>
                <li>Tests de m√©triques Prometheus</li>
                <li>Tests d'authentification</li>
                <li>Tests de base de donn√©es</li>
                <li>Tests RAG</li>
            </ul>
        </div>
        
        <div class="section">
            <h2>üìà M√©triques Test√©es</h2>
            <ul>
                <li>Request Rate (taux de requ√™tes)</li>
                <li>Response Time (temps de r√©ponse)</li>
                <li>Error Rate (taux d'erreurs)</li>
                <li>Active Connections (connexions actives)</li>
                <li>HTTP Methods (m√©thodes HTTP)</li>
                <li>Endpoint Performance (performance des endpoints)</li>
            </ul>
        </div>
        
        <div class="section warning">
            <h2>‚ö†Ô∏è Points d'Attention</h2>
            <ul>
                <li>V√©rifier la couverture de code</li>
                <li>Analyser les tests de performance</li>
                <li>Contr√¥ler les m√©triques de s√©curit√©</li>
            </ul>
        </div>
    </body>
    </html>
    """.format(timestamp=time.strftime("%Y-%m-%d %H:%M:%S"))
    
    with open("test_summary.html", "w", encoding="utf-8") as f:
        f.write(report_content)
    
    print("‚úÖ Rapport g√©n√©r√©: test_summary.html")


def main():
    """Fonction principale."""
    parser = argparse.ArgumentParser(
        description="Script d'ex√©cution des tests FastAPI avec options avanc√©es"
    )
    
    # Options de verbosit√©
    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="Mode verbeux"
    )
    parser.add_argument(
        "-vv", "--very-verbose",
        action="store_true",
        help="Mode tr√®s verbeux"
    )
    parser.add_argument(
        "-q", "--quiet",
        action="store_true",
        help="Mode silencieux"
    )
    
    # Options de couverture
    parser.add_argument(
        "--coverage",
        action="store_true",
        help="G√©n√©rer un rapport de couverture"
    )
    
    # Options de performance
    parser.add_argument(
        "--slow",
        action="store_true",
        help="Inclure les tests lents"
    )
    parser.add_argument(
        "--fast",
        action="store_true",
        help="Exclure les tests lents"
    )
    
    # Options de filtrage
    parser.add_argument(
        "-k", "--test-pattern",
        type=str,
        help="Filtrer les tests par pattern"
    )
    
    # Options de parall√©lisation
    parser.add_argument(
        "--parallel",
        action="store_true",
        help="Ex√©cuter les tests en parall√®le"
    )
    
    # Options de rapport
    parser.add_argument(
        "--html-report",
        action="store_true",
        help="G√©n√©rer un rapport HTML"
    )
    parser.add_argument(
        "--junit-report",
        action="store_true",
        help="G√©n√©rer un rapport JUnit XML"
    )
    
    # Options de v√©rifications
    parser.add_argument(
        "--lint",
        action="store_true",
        help="Ex√©cuter les v√©rifications de code"
    )
    parser.add_argument(
        "--security",
        action="store_true",
        help="Ex√©cuter les v√©rifications de s√©curit√©"
    )
    parser.add_argument(
        "--performance",
        action="store_true",
        help="Ex√©cuter les tests de performance"
    )
    parser.add_argument(
        "--all",
        action="store_true",
        help="Ex√©cuter toutes les v√©rifications"
    )
    
    args = parser.parse_args()
    
    print("üöÄ D√©marrage de l'ex√©cution des tests FastAPI")
    print(f"üìÅ R√©pertoire de travail: {os.getcwd()}")
    
    success = True
    
    # Ex√©cuter les tests pytest
    if not run_tests_with_options(args):
        success = False
    
    # V√©rifications de code
    if args.lint or args.all:
        if not run_linting():
            success = False
    
    # V√©rifications de s√©curit√©
    if args.security or args.all:
        if not run_security_checks():
            success = False
    
    # Tests de performance
    if args.performance or args.all:
        if not run_performance_tests():
            success = False
    
    # G√©n√©rer le rapport
    generate_test_report()
    
    # R√©sum√© final
    print(f"\n{'='*60}")
    if success:
        print("‚úÖ Tous les tests et v√©rifications ont r√©ussi!")
    else:
        print("‚ùå Certains tests ou v√©rifications ont √©chou√©.")
    print(f"{'='*60}")
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())