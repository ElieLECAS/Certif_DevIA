version: "3.8"

services:
    # Base de données PostgreSQL
    postgres:
        image: postgres:15
        container_name: gmao-postgres
        environment:
            POSTGRES_DB: ${POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "${POSTGRES_PORT}:5432"
        volumes:
            - postgres_data:/var/lib/postgresql/data
            - ./01-init.sql:/docker-entrypoint-initdb.d/01-init.sql
        restart: unless-stopped
        healthcheck:
            test:
                [
                    "CMD-SHELL",
                    "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}",
                ]
            interval: 30s
            timeout: 10s
            retries: 3

    # API FastAPI pour la gestion de stock
    api:
        build: ./E4/api
        container_name: gmao-api
        ports:
            - "8010:8000"
        environment:
            - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
            - PYTHONUNBUFFERED=1
        volumes:
            - ./E4/api:/app
        depends_on:
            postgres:
                condition: service_healthy
        restart: unless-stopped

    # Application Flask Mobile
    flask-mobile:
        build: ./E4/UI
        container_name: gmao-flask-mobile
        ports:
            - "8080:5000"
        environment:
            - API_BASE_URL=http://api:8000
            - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
            - FLASK_ENV=production
        volumes:
            - ./E4/UI:/app
        depends_on:
            - api
        restart: unless-stopped
    
    ollama:
        image: ollama/ollama:latest
        container_name: gmao-ollama
        ports:
            - "11434:11434"
        volumes:
            - .E2/models:/root/.ollama/models
        entrypoint: |
            /bin/bash -c "
            ollama serve &
            echo 'Attente du démarrage du serveur Ollama...'
            while ! curl -s http://localhost:11434/api/tags > /dev/null 2>&1; do
                sleep 2
            done
            echo 'Serveur Ollama prêt, téléchargement du modèle llama3.2:1b...'
            ollama pull llama3.2:1b
            echo 'Modèle téléchargé avec succès!'
            wait
            "
        restart: unless-stopped


volumes:
    postgres_data:
