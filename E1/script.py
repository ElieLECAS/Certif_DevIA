#!/usr/bin/env python3
"""
Script principal pour traiter automatiquement les fichiers LOG depuis le serveur FTP
et les sauvegarder dans la base de donn√©es PostgreSQL.

Ce script est con√ßu pour √™tre ex√©cut√© automatiquement par cron (t√¢che planifi√©e).
Il fait le travail suivant:
1. Se connecte au serveur FTP
2. T√©l√©charge tous les fichiers LOG des diff√©rents centres d'usinage
3. Analyse le contenu de chaque fichier
4. Sauvegarde les donn√©es dans PostgreSQL
5. Supprime les fichiers trait√©s du FTP

Utilisation:
- Ex√©cution manuelle: python script.py
- Ex√©cution par cron: 0 */6 * * * /usr/bin/python3 /app/script.py
"""

import sys
import os
import logging
from datetime import datetime

# Ajouter le r√©pertoire courant au path pour pouvoir importer notre service
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from ftp_log_service import FTPLogService

# Configuration du syst√®me de logs pour le script principal
# Les logs seront √©crits dans un fichier ET affich√©s √† l'√©cran
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        # √âcrire les logs dans un fichier (pour cron)
        logging.FileHandler('/app/cron.log'),
        # Afficher les logs √† l'√©cran (pour ex√©cution manuelle)
        logging.StreamHandler(sys.stdout)
    ]
)

logger = logging.getLogger(__name__)


def main():
    """
    Fonction principale du script qui orchestre tout le processus.
    
    Returns:
        int: Code de sortie (0 = succ√®s, 1 = erreur)
    """
    # Enregistrer l'heure de d√©but pour calculer la dur√©e totale
    start_time = datetime.now()
    
    # === EN-T√äTE DU TRAITEMENT ===
    logger.info("=" * 80)
    logger.info(f"üöÄ D√âBUT DU TRAITEMENT DES LOGS FTP - {start_time.strftime('%Y-%m-%d %H:%M:%S')}")
    logger.info("=" * 80)
    
    try:
        # === √âTAPE 1: CR√âER UNE INSTANCE DU SERVICE ===
        logger.info("üìã Initialisation du service FTP Log...")
        service = FTPLogService()
        
        # === √âTAPE 2: TRAITER TOUS LES FICHIERS LOG ===
        logger.info("üîÑ D√©marrage du traitement de tous les fichiers LOG...")
        
        # delete_after_processing=True pour supprimer les fichiers apr√®s traitement
        # C'est le comportement normal en production
        success = service.process_all_logs(delete_after_processing=True)
        
        # === √âTAPE 3: CALCULER LA DUR√âE ET AFFICHER LE R√âSULTAT ===
        end_time = datetime.now()
        duration = end_time - start_time
        
        if success:
            # === TRAITEMENT R√âUSSI ===
            logger.info("=" * 80)
            logger.info(f"üéâ TRAITEMENT TERMIN√â AVEC SUCC√àS - {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
            logger.info(f"‚è±Ô∏è Dur√©e totale: {duration}")
            logger.info("=" * 80)
            
            return 0  # Code de sortie 0 = succ√®s
        else:
            # === TRAITEMENT AVEC ERREURS ===
            logger.error("=" * 80)
            logger.error(f"‚ö†Ô∏è TRAITEMENT TERMIN√â AVEC DES ERREURS - {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
            logger.error(f"‚è±Ô∏è Dur√©e totale: {duration}")
            logger.error("=" * 80)
            
            return 1  # Code de sortie 1 = erreur
        
    except Exception as e:
        # === ERREUR INATTENDUE ===
        end_time = datetime.now()
        duration = end_time - start_time
        
        logger.error("=" * 80)
        logger.error(f"üí• ERREUR CRITIQUE LORS DU TRAITEMENT - {end_time.strftime('%Y-%m-%d %H:%M:%S')}")
        logger.error(f"‚è±Ô∏è Dur√©e avant erreur: {duration}")
        logger.error(f"‚ùå Erreur: {str(e)}")
        logger.error("=" * 80)
        
        # Afficher les d√©tails complets de l'erreur pour le d√©bogage
        import traceback
        logger.error("üîç D√©tails complets de l'erreur:")
        logger.error(traceback.format_exc())
        
        return 1  # Code de sortie 1 = erreur


# Point d'entr√©e du script
if __name__ == "__main__":
    # Ex√©cuter la fonction principale et utiliser son code de sortie
    exit_code = main()
    
    # Terminer le script avec le code de sortie appropri√©
    # Ceci permet aux syst√®mes de surveillance (comme cron) de savoir si le script a r√©ussi
    sys.exit(exit_code)
