from fastapi import FastAPI
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
import uvicorn
from datetime import datetime

# FastAPI app
app = FastAPI(title="Chatbot SAV", description="Application de chatbot pour le service apr√®s-vente")

# Static files et templates
app.mount("/static", StaticFiles(directory="static"), name="static")
templates = Jinja2Templates(directory="templates")

# Importer la configuration de base de donn√©es
from database import engine

# Importer et inclure les routes
from routes import router
app.include_router(router)

# Cr√©er les tables au d√©marrage (avec gestion d'erreur)
@app.on_event("startup")
async def startup_event():
    import asyncio
    import time
    
    # Attendre que la base de donn√©es soit pr√™te avec retry
    max_retries = 10
    for attempt in range(max_retries):
        try:
            from models import Base, User
            from database import SessionLocal
            from auth import get_password_hash
            
            # Tester la connexion en cr√©ant les tables
            Base.metadata.create_all(bind=engine)
            print("‚úÖ Tables cr√©√©es avec succ√®s")
            
            # Cr√©er les utilisateurs par d√©faut
            db = SessionLocal()
            try:
                from models import ClientUser, Commande
                
                # Cr√©er l'utilisateur admin
                admin_user = db.query(User).filter(User.username == "admin").first()
                if not admin_user:
                    admin_user = User(
                        username="admin",
                        email="admin@chatbot-sav.com",
                        hashed_password=get_password_hash("admin123"),
                        is_active=True,
                        is_staff=True,
                        is_superuser=True
                    )
                    db.add(admin_user)
                    db.commit()
                    print("‚úÖ Utilisateur admin cr√©√© avec succ√®s")
                    print("   üë§ Username: admin")
                    print("   üîë Password: admin123")
                    print("   üìß Email: admin@chatbot-sav.com")
                else:
                    print("‚ÑπÔ∏è  Utilisateur admin existe d√©j√†")
                
                # Cr√©er le premier client
                client1_user = db.query(User).filter(User.username == "martin").first()
                if not client1_user:
                    client1_user = User(
                        username="martin",
                        email="martin.dupont@email.com",
                        hashed_password=get_password_hash("client123"),
                        is_active=True,
                        is_staff=False,
                        is_superuser=False,
                        nom="Dupont",
                        prenom="Martin",
                        telephone="01 23 45 67 89",
                        adresse="123 Rue de la Paix, 75001 Paris"
                    )
                    db.add(client1_user)
                    db.commit()
                    db.refresh(client1_user)
                    
                    # Cr√©er le profil client
                    client1_profile = ClientUser(
                        user_id=client1_user.id,
                        is_client_only=True
                    )
                    db.add(client1_profile)
                    
                    # Cr√©er les commandes pour client1
                    commande1 = Commande(
                        numero_commande="CMD2024-001",
                        user_id=client1_user.id,
                        date_commande=datetime(2024, 1, 15, 10, 30),
                        date_livraison=datetime(2024, 1, 25, 14, 0),
                        statut="livree",
                        montant_ht=1250.00,
                        montant_ttc=1500.00,
                        produits=[
                            {"type": "Porte d'entr√©e", "modele": "P-ALU-DESIGN", "quantite": 1, "prix": 1500.00}
                        ],
                        adresse_livraison="123 Rue de la Paix, 75001 Paris",
                        notes="Livraison en matin√©e"
                    )
                    db.add(commande1)
                    
                    commande2 = Commande(
                        numero_commande="CMD2024-015",
                        user_id=client1_user.id,
                        date_commande=datetime(2024, 3, 10, 16, 45),
                        statut="en_cours",
                        montant_ht=800.00,
                        montant_ttc=960.00,
                        produits=[
                            {"type": "Fen√™tre", "modele": "F-PVC-2V", "quantite": 2, "prix": 480.00}
                        ],
                        adresse_livraison="123 Rue de la Paix, 75001 Paris",
                        notes="Fabrication en cours"
                    )
                    db.add(commande2)
                    
                    db.commit()
                    print("‚úÖ Client Martin Dupont cr√©√© avec succ√®s")
                    print("   üë§ Username: martin")
                    print("   üîë Password: client123")
                    print("   üìß Email: martin.dupont@email.com")
                    print("   üì¶ 2 commandes cr√©√©es")
                else:
                    print("‚ÑπÔ∏è  Client Martin existe d√©j√†")
                
                # Cr√©er le deuxi√®me client
                client2_user = db.query(User).filter(User.username == "sophie").first()
                if not client2_user:
                    client2_user = User(
                        username="sophie",
                        email="sophie.martin@email.com",
                        hashed_password=get_password_hash("client123"),
                        is_active=True,
                        is_staff=False,
                        is_superuser=False,
                        nom="Martin",
                        prenom="Sophie",
                        telephone="04 78 12 34 56",
                        adresse="456 Avenue des Champs, 69000 Lyon"
                    )
                    db.add(client2_user)
                    db.commit()
                    db.refresh(client2_user)
                    
                    # Cr√©er le profil client
                    client2_profile = ClientUser(
                        user_id=client2_user.id,
                        is_client_only=True
                    )
                    db.add(client2_profile)
                    
                    # Cr√©er les commandes pour client2
                    commande3 = Commande(
                        numero_commande="CMD2024-008",
                        user_id=client2_user.id,
                        date_commande=datetime(2024, 2, 5, 9, 15),
                        date_livraison=datetime(2024, 2, 20, 11, 30),
                        statut="livree",
                        montant_ht=2100.00,
                        montant_ttc=2520.00,
                        produits=[
                            {"type": "Porte-fen√™tre", "modele": "PF-ALU-3V", "quantite": 1, "prix": 2520.00}
                        ],
                        adresse_livraison="456 Avenue des Champs, 69000 Lyon",
                        notes="Installation r√©ussie"
                    )
                    db.add(commande3)
                    
                    commande4 = Commande(
                        numero_commande="CMD2024-025",
                        user_id=client2_user.id,
                        date_commande=datetime(2024, 4, 12, 13, 20),
                        statut="en_cours",
                        montant_ht=600.00,
                        montant_ttc=720.00,
                        produits=[
                            {"type": "Volet roulant", "modele": "VR-ELEC-SOL", "quantite": 3, "prix": 240.00}
                        ],
                        adresse_livraison="456 Avenue des Champs, 69000 Lyon",
                        notes="Commande en pr√©paration"
                    )
                    db.add(commande4)
                    
                    db.commit()
                    print("‚úÖ Client Sophie Martin cr√©√© avec succ√®s")
                    print("   üë§ Username: sophie")
                    print("   üîë Password: client123")
                    print("   üìß Email: sophie.martin@email.com")
                    print("   üì¶ 2 commandes cr√©√©es")
                else:
                    print("‚ÑπÔ∏è  Client Sophie existe d√©j√†")
                
                break  # Sortir de la boucle si tout va bien
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur lors de la cr√©ation des utilisateurs: {e}")
            finally:
                db.close()
                
        except Exception as e:
            print(f"‚ö†Ô∏è  Tentative {attempt + 1}/{max_retries} - Erreur de connexion DB: {e}")
            if attempt < max_retries - 1:
                print("‚è≥ Nouvelle tentative dans 3 secondes...")
                await asyncio.sleep(3)
            else:
                print("‚ùå Impossible de se connecter √† la base de donn√©es apr√®s plusieurs tentatives")
                print("Les tables seront cr√©√©es lors de la premi√®re requ√™te")

if __name__ == "__main__":
    uvicorn.run("app:app", host="0.0.0.0", port=8000, reload=True) 