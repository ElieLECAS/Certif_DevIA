#!/usr/bin/env python3
"""
Script pour nettoyer compl√®tement la base de donn√©es.

Ce script supprime toutes les donn√©es des tables de production
et remet les compteurs automatiques √† z√©ro.

‚ö†Ô∏è ATTENTION: Ce script supprime TOUTES les donn√©es!
Utilisez-le seulement pour les tests ou pour repartir √† z√©ro.

Utilisation: python clean_database.py
"""

import os
import psycopg2
import logging

# Configuration du syst√®me de logs pour voir ce qui se passe
logging.basicConfig(
    level=logging.INFO, 
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def clean_database():
    """
    Fonction principale qui vide compl√®tement la base de donn√©es.
    
    Cette fonction:
    1. Se connecte √† la base de donn√©es
    2. Supprime toutes les donn√©es de toutes les tables
    3. Remet les compteurs automatiques (s√©quences) √† z√©ro
    4. V√©rifie que tout est bien vide
    
    Returns:
        bool: True si le nettoyage r√©ussit, False sinon
    """
    try:
        logger.info("üßπ D√©marrage du nettoyage de la base de donn√©es...")
        
        # === √âTAPE 1: R√âCUP√âRER LA CONFIGURATION ===
        # Les param√®tres de connexion peuvent √™tre surcharg√©s par des variables d'environnement
        # Utilisation des variables d'environnement du docker-compose.yaml
        db_host = os.getenv('POSTGRES_HOST')  # 'db' est le nom du service dans docker-compose
        db_name = os.getenv('POSTGRES_DB')
        db_user = os.getenv('POSTGRES_USER')
        db_pass = os.getenv('POSTGRES_PASSWORD')
        
        logger.info(f"üì° Connexion √† la base de donn√©es: {db_host}/{db_name}")
        
        # === √âTAPE 2: SE CONNECTER √Ä LA BASE DE DONN√âES ===
        conn = psycopg2.connect(
            host=db_host,
            database=db_name,
            user=db_user,
            password=db_pass
        )
        cur = conn.cursor()
        
        logger.info("‚úÖ Connexion √† la base de donn√©es r√©ussie")
        
        # === √âTAPE 3: SUPPRIMER TOUTES LES DONN√âES ===
        logger.info("üóëÔ∏è Suppression de toutes les donn√©es...")
        
        # Liste des tables dans l'ordre de suppression
        # IMPORTANT: L'ordre est crucial √† cause des cl√©s √©trang√®res!
        # On doit supprimer d'abord les tables "enfants" puis les tables "parents"
        tables = [
            'piece_production',      # D√©pend de session_production
            'periode_arret',         # D√©pend de session_production
            'periode_attente',       # D√©pend de session_production
            'job_profil',           # D√©pend de session_production
            'session_production',    # D√©pend de centre_usinage
            'centre_usinage'        # Table principale (pas de d√©pendance)
        ]
        
        # Supprimer les donn√©es de chaque table
        for table in tables:
            try:
                logger.info(f"  üóÇÔ∏è Nettoyage de la table: {table}")
                
                # Ex√©cuter la commande DELETE pour vider la table
                cur.execute(f"DELETE FROM {table}")
                
                # R√©cup√©rer le nombre de lignes supprim√©es
                count = cur.rowcount
                logger.info(f"    ‚úÖ {count} lignes supprim√©es de {table}")
                
            except Exception as e:
                logger.warning(f"    ‚ö†Ô∏è Erreur lors de la suppression de {table}: {e}")
        
        # === √âTAPE 4: REMETTRE LES COMPTEURS √Ä Z√âRO ===
        logger.info("üîÑ Remise √† z√©ro des compteurs automatiques...")
        
        # Liste des s√©quences (compteurs automatiques) √† remettre √† z√©ro
        # Ces s√©quences g√®rent les ID auto-incr√©ment√©s des tables
        sequences = [
            'centre_usinage_id_seq',
            'session_production_id_seq',
            'job_profil_id_seq',
            'periode_attente_id_seq',
            'periode_arret_id_seq',
            'piece_production_id_seq'
        ]
        
        # Remettre chaque s√©quence √† 1
        for seq in sequences:
            try:
                logger.info(f"  üî¢ Remise √† z√©ro de: {seq}")
                
                # Commande pour remettre la s√©quence √† 1
                cur.execute(f"ALTER SEQUENCE {seq} RESTART WITH 1")
                logger.info(f"    ‚úÖ {seq} remise √† 1")
                
            except Exception as e:
                logger.warning(f"    ‚ö†Ô∏è Erreur lors de la remise √† z√©ro de {seq}: {e}")
        
        # === √âTAPE 5: CONFIRMER TOUTES LES MODIFICATIONS ===
        logger.info("üíæ Sauvegarde des modifications...")
        conn.commit()
        logger.info("‚úÖ Toutes les modifications ont √©t√© sauvegard√©es")
        
        # === √âTAPE 6: V√âRIFIER QUE TOUT EST VIDE ===
        logger.info("üîç V√©rification que le nettoyage est complet...")
        
        all_empty = True
        
        # V√©rifier chaque table (dans l'ordre inverse pour l'affichage)
        for table in reversed(tables):
            try:
                # Compter le nombre de lignes restantes
                cur.execute(f"SELECT COUNT(*) FROM {table}")
                count = cur.fetchone()[0]
                
                if count == 0:
                    status = "‚úÖ VIDE"
                else:
                    status = f"‚ùå {count} lignes restantes"
                    all_empty = False
                
                logger.info(f"  üìä {table}: {status}")
                
            except Exception as e:
                logger.error(f"  ‚ùå Erreur lors de la v√©rification de {table}: {e}")
                all_empty = False
        
        # === √âTAPE 7: FERMER LES CONNEXIONS ===
        cur.close()
        conn.close()
        
        # === R√âSULTAT FINAL ===
        if all_empty:
            logger.info("\nüéâ BASE DE DONN√âES COMPL√àTEMENT NETTOY√âE!")
            logger.info("‚ú® Toutes les tables sont vides et pr√™tes pour de nouvelles donn√©es")
            return True
        else:
            logger.error("\n‚ö†Ô∏è Le nettoyage n'est pas complet!")
            logger.error("Certaines tables contiennent encore des donn√©es")
            return False
        
    except Exception as e:
        logger.error(f"‚ùå Erreur critique lors du nettoyage de la base de donn√©es: {e}")
        
        # Afficher plus de d√©tails sur l'erreur
        import traceback
        logger.error("üîç D√©tails de l'erreur:")
        logger.error(traceback.format_exc())
        
        return False


def main():
    """
    Fonction principale avec demande de confirmation.
    
    Returns:
        int: Code de sortie (0 = succ√®s, 1 = erreur)
    """
    logger.info("=" * 80)
    logger.info("üßπ SCRIPT DE NETTOYAGE DE LA BASE DE DONN√âES")
    logger.info("=" * 80)
    
    # Avertissement de s√©curit√©
    logger.warning("‚ö†Ô∏è ATTENTION: Ce script va supprimer TOUTES les donn√©es!")
    logger.warning("‚ö†Ô∏è Cette action est IRR√âVERSIBLE!")
    
    # Demander confirmation √† l'utilisateur
    try:
        response = input("\n‚ùì √ätes-vous s√ªr de vouloir continuer? (tapez 'OUI' pour confirmer): ")
        
        if response.upper() != 'OUI':
            logger.info("‚ùå Nettoyage annul√© par l'utilisateur")
            return 0
        
    except KeyboardInterrupt:
        logger.info("\n‚ùå Nettoyage interrompu par l'utilisateur (Ctrl+C)")
        return 0
    
    # Ex√©cuter le nettoyage
    logger.info("\nüöÄ D√©marrage du nettoyage...")
    success = clean_database()
    
    if success:
        logger.info("\nüéØ Nettoyage termin√© avec succ√®s!")
        return 0
    else:
        logger.error("\nüí• Erreur lors du nettoyage!")
        return 1


# Point d'entr√©e du script
if __name__ == "__main__":
    exit_code = main()
    exit(exit_code) 